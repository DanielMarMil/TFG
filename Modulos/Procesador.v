// Code generated by Icestudio 0.8.0
// Tue, 21 Dec 2021 16:26:47 GMT

`default_nettype none

//---- Top entity
module main (
 input v88986e,
 output [0:7] vinit
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v88986e;
 assign w2 = v88986e;
 assign w2 = w0;
 v3256ad v5e49d5 (
  .v61bf59(w0),
  .v2521b4(w1),
  .v3abc7c(w1),
  .vb5a909(w2)
 );
 assign vinit = 8'b00000000;
endmodule


//---- Top entity
module v3256ad (
 input v61bf59,
 input vb5a909,
 input v3abc7c,
 output v2521b4
);
 wire [0:3] w0;
 wire [0:31] w1;
 wire w2;
 wire [0:15] w3;
 wire [0:31] w4;
 wire w5;
 wire [0:31] w6;
 wire w7;
 wire w8;
 wire [0:31] w9;
 wire [0:4] w10;
 wire w11;
 wire [0:31] w12;
 wire [0:31] w13;
 wire [0:31] w14;
 wire [0:31] w15;
 wire [0:31] w16;
 wire w17;
 wire [0:31] w18;
 wire [0:31] w19;
 wire [0:31] w20;
 wire [0:31] w21;
 wire [0:3] w22;
 wire [0:31] w23;
 wire w24;
 wire w25;
 wire w26;
 wire w27;
 wire w28;
 wire w29;
 wire [0:2] w30;
 wire w31;
 wire w32;
 wire [0:31] w33;
 wire [0:31] w34;
 wire w35;
 wire w36;
 wire w37;
 wire w38;
 wire [0:31] w39;
 wire [0:31] w40;
 wire w41;
 wire w42;
 wire w43;
 wire w44;
 wire w45;
 wire w46;
 wire w47;
 wire [0:4] w48;
 wire [0:4] w49;
 wire [0:4] w50;
 wire [0:31] w51;
 wire [0:4] w52;
 wire [0:31] w53;
 wire [0:31] w54;
 wire w55;
 wire [0:5] w56;
 wire w57;
 wire [0:25] w58;
 wire w59;
 wire w60;
 assign w17 = v61bf59;
 assign w35 = vb5a909;
 assign w36 = vb5a909;
 assign w37 = vb5a909;
 assign w38 = vb5a909;
 assign w41 = v3abc7c;
 assign w42 = v3abc7c;
 assign w43 = v3abc7c;
 assign v2521b4 = w60;
 assign w5 = w2;
 assign w15 = w13;
 assign w19 = w16;
 assign w23 = w16;
 assign w23 = w19;
 assign w25 = w24;
 assign w26 = w24;
 assign w26 = w25;
 assign w27 = w24;
 assign w27 = w25;
 assign w27 = w26;
 assign w28 = w24;
 assign w28 = w25;
 assign w28 = w26;
 assign w28 = w27;
 assign w29 = w24;
 assign w29 = w25;
 assign w29 = w26;
 assign w29 = w27;
 assign w29 = w28;
 assign w32 = w31;
 assign w34 = w33;
 assign w36 = w35;
 assign w37 = w35;
 assign w37 = w36;
 assign w38 = w35;
 assign w38 = w36;
 assign w38 = w37;
 assign w40 = w39;
 assign w42 = w41;
 assign w43 = w41;
 assign w43 = w42;
 assign w45 = w44;
 assign w47 = w46;
 assign w49 = w48;
 assign w54 = w53;
 v4aa98f v5fa690 (
  .v668da4(w0),
  .v0abde4(w30)
 );
 v6899d1 v01a50b (
  .v7b0b31(w1),
  .vf330bb(w13)
 );
 veb3027 v302b26 (
  .vfb2d57(w9),
  .va196b8(w38),
  .v57717b(w40),
  .ve480dc(w43),
  .v19af5b(w45),
  .v9c7c2c(w53),
  .ve357ae(w59)
 );
 v0fc26e v52e0d8 (
  .ve768a8(w0),
  .vfa7d11(w4),
  .v1e7c65(w6),
  .v6144d8(w53),
  .v3da6a5(w55)
 );
 vc7cf4e v484008 (
  .v6959e9(w24),
  .vafd80b(w31),
  .vab3e87(w44),
  .v4f3153(w46),
  .vfde78d(w56),
  .v8e4ccb(w57),
  .vcd3776(w59),
  .v50149b(w60)
 );
 v6eb415 vaa95fb (
  .vf36d91(w1),
  .vf728ca(w3),
  .vaa7a52(w48),
  .va9e58a(w50),
  .v58c5d0(w52),
  .ve46738(w56),
  .vcea0f4(w58)
 );
 v528969 v7e89de (
  .vcbab45(w2),
  .v3ca442(w26),
  .v0e28cb(w31)
 );
 v9bd618 v3c0acd (
  .v074026(w2),
  .vee7d2e(w24),
  .v7c941b(w25),
  .vf4438f(w30)
 );
 vb8675c v4413dd (
  .v411418(w7),
  .v4dc0e5(w27),
  .v440cab(w44),
  .ve476c7(w46)
 );
 vf069d0 vfd2966 (
  .v70ed7b(w4),
  .v51a33d(w7),
  .v92bf35(w10),
  .ve70352(w35),
  .vff4be9(w39),
  .vd1d1c6(w41),
  .v162198(w49),
  .v7d4d05(w51),
  .v630828(w52)
 );
 vad2ca2 vdc374d (
  .v8875b0(w3),
  .vf3e218(w33)
 );
 v5f636f v044abf (
  .v98063f(w5),
  .v40e64d(w6),
  .vaaa062(w33),
  .v477049(w39)
 );
 v528969 ve3fe82 (
  .vcbab45(w8),
  .v3ca442(w29),
  .v0e28cb(w47)
 );
 v5f636f v80f512 (
  .v98063f(w8),
  .vaaa062(w9),
  .v40e64d(w51),
  .v477049(w54)
 );
 ve1ccfb ve1865f (
  .v780e4a(w10),
  .v3f515a(w28),
  .v4d5da6(w48),
  .v450788(w50)
 );
 v5f636f v654f80 (
  .v98063f(w11),
  .vaaa062(w12),
  .v40e64d(w14),
  .v477049(w18)
 );
 v7ebc90 v196729 (
  .vcbab45(w11),
  .v0e28cb(w32),
  .v3ca442(w55)
 );
 v5f636f v6b4e5e (
  .v40e64d(w12),
  .vaaa062(w16),
  .v477049(w21),
  .v98063f(w57)
 );
 vd2ef76 v4ccf81 (
  .v240270(w13),
  .vc1d2ba(w14),
  .v9b5fcc(w37)
 );
 v27e935 v4fda66 (
  .vfe4e9a(w15),
  .v5d0c90(w16),
  .va0c046(w17),
  .v5d2dcc(w36),
  .va993b5(w42)
 );
 vb672ab ved6fce (
  .v49375d(w18),
  .va7e1cb(w19),
  .v4486d9(w20)
 );
 v2f96ba v8abf2a (
  .v9cfdd2(w20),
  .ve99b4a(w34)
 );
 v426bc2 v9eb3f2 (
  .vb27a80(w21),
  .v52a81f(w22),
  .vb78917(w58)
 );
 v9da047 vebdf5a (
  .v8b2ec8(w22),
  .va80fcd(w23)
 );
endmodule


//---- Top entity
module v4aa98f (
 input [2:0] v0abde4,
 input [5:0] v30785e,
 output [3:0] v668da4
);
 wire [0:5] w0;
 wire [0:2] w1;
 wire [0:3] w2;
 assign w0 = v30785e;
 assign w1 = v0abde4;
 assign v668da4 = w2;
 v4aa98f_v36ad38 v36ad38 (
  .funcion(w0),
  .OpALU(w1),
  .OUT(w2)
 );
endmodule



module v4aa98f_v36ad38 (
 input [2:0] OpALU,
 input [5:0] funcion,
 output [3:0] OUT
);
 //-- Address bus
 wire [5:0] funcion;
 wire [2:0] OpALU;
 
 //-- Data bus
 reg  [3:0] OUT;
 
 always @(*)
     case (OpALU)
         0   :   OUT <= 2;
         1   :   OUT <= 6;
         2   :   OUT <= 0;
         3   :   OUT <= 1;
         4   :   OUT <= 7;
         5   :   OUT <= 12;
         7   :   case(funcion)
                     32  :   OUT <= 2;
                     34  :   OUT <= 6;
                     36  :   OUT <= 0;
                     37  :   OUT <= 1;
                     42  :   OUT <= 7;
                 endcase
     endcase 
endmodule
//---- Top entity
module v6899d1 (
 input [31:0] vf330bb,
 output [31:0] v7b0b31
);
 wire [0:31] w0;
 wire [0:31] w1;
 assign w0 = vf330bb;
 assign v7b0b31 = w1;
 v6899d1_v9d46af v9d46af (
  .A(w0),
  .I(w1)
 );
endmodule



module v6899d1_v9d46af (
 input [31:0] A,
 output [31:0] I
);
 // Instruction Bus (32 bits)
 reg [31:0] I;
 // Memory Instruction
 reg [31:0] ins [0:63];
 
 parameter INSTROMFILE = "instruction.list";
 
 always @(*) begin
    I <= ins[A[31:2]];
 end
 
 // Memory contents read
 // from the INSTROMFILE table
 initial begin
     if (INSTROMFILE) $readmemh(INSTROMFILE, ins);
 end
endmodule
//---- Top entity
module veb3027 (
 input [31:0] v9c7c2c,
 input [31:0] v57717b,
 input ve357ae,
 input v19af5b,
 input va196b8,
 input ve480dc,
 output [31:0] vfb2d57
);
 wire [0:31] w0;
 wire [0:31] w1;
 wire [0:31] w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 assign vfb2d57 = w0;
 assign w1 = v9c7c2c;
 assign w2 = v57717b;
 assign w3 = ve357ae;
 assign w4 = v19af5b;
 assign w5 = va196b8;
 assign w6 = ve480dc;
 veb3027_v4ff6ac v4ff6ac (
  .Read_Data(w0),
  .Address(w1),
  .Wirte_Data(w2),
  .Write(w3),
  .Read(w4),
  .clk(w5),
  .reset(w6)
 );
endmodule



module veb3027_v4ff6ac (
 input [31:0] Address,
 input [31:0] Wirte_Data,
 input Write,
 input Read,
 input clk,
 input reset,
 output [31:0] Read_Data
);
 // Memory 
 reg [31:0] Mem [0:255];
 
 parameter ROMFILE = "prueba.list";
 
 // Output Data
 reg [31:0] Read_Data;
 
 // Input Write Data
 wire [31:0] Write_Data;
 
 integer i;
 
 always @(posedge clk or posedge reset)
 begin
     if (reset == 0) begin
         if(Write == 1 && Read == 0) begin
             Mem[Address[31:2]] <= Write_Data;
         end
     end else begin
         for (i = 0; i < 256; i = i + 1) begin
             Mem[i] <= 0;
         end
     end
 end
 
 always @(*)
 begin
     if (reset == 0) begin
         if(Write == 0 && Read == 1) begin
             Read_Data <= Mem[Address[31:2]];
         end else begin
             Read_Data <= 0;
         end
     end else begin
         Read_Data <= 0;
     end
 end
 
 // Memory contents read
 // from the ROMFILE table
 initial begin
     if (ROMFILE) $readmemh(ROMFILE, Mem);
     i <= 0;
 end
endmodule
//---- Top entity
module v0fc26e (
 input [31:0] vfa7d11,
 input [31:0] v1e7c65,
 input [3:0] ve768a8,
 output [31:0] v6144d8,
 output v3da6a5
);
 wire [0:31] w0;
 wire [0:31] w1;
 wire [0:3] w2;
 wire [0:31] w3;
 wire w4;
 assign w0 = vfa7d11;
 assign w1 = v1e7c65;
 assign w2 = ve768a8;
 assign v6144d8 = w3;
 assign v3da6a5 = w4;
 v0fc26e_v00bd94 v00bd94 (
  .A(w0),
  .B(w1),
  .Op(w2),
  .Result(w3),
  .Z(w4)
 );
endmodule

module v0fc26e_v00bd94 (
 input [31:0] A,
 input [31:0] B,
 input [3:0] Op,
 output [31:0] Result,
 output Z
);
 //-- Address bus
 wire signed [31:0] A;
 wire signed [31:0] B;
 wire [3:0]  Op;
 
 //-- Data bus
 reg [31:0]  Result = 0;
 reg Z;
 
 always @(*) begin
     case (Op)
         0   :   Result = A & B;
         1   :   Result = A | B;
         2   :   Result = A + B;
         6   :   Result = A - B;
         7   :   if(A < B) begin
                     Result = 1;
                 end else begin
                     Result = 0;
                 end
         12  :   Result = ~(A | B);
         default : Result = 0;
     endcase
     if(Result == 0) begin
         Z = 1;
     end else begin
         Z = 0;
     end
 end
endmodule
//---- Top entity
module vc7cf4e (
 input [5:0] vfde78d,
 output v8e4ccb,
 output v50149b,
 output vab3e87,
 output vcd3776,
 output v6959e9,
 output v4f3153,
 output vafd80b
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire [0:5] w7;
 assign v8e4ccb = w0;
 assign v50149b = w1;
 assign vab3e87 = w2;
 assign vcd3776 = w3;
 assign v6959e9 = w4;
 assign v4f3153 = w5;
 assign vafd80b = w6;
 assign w7 = vfde78d;
 vc7cf4e_v5c4a4b v5c4a4b (
  .j(w0),
  .halt(w1),
  .lw(w2),
  .sw(w3),
  .alu(w4),
  .addi(w5),
  .beq(w6),
  .instruction(w7)
 );
endmodule



module vc7cf4e_v5c4a4b (
 input [5:0] instruction,
 output j,
 output halt,
 output lw,
 output sw,
 output alu,
 output addi,
 output beq
);
 wire [5:0] instruction;
 
 reg j;
 reg halt;
 reg lw;
 reg sw;
 reg alu;
 reg addi;
 reg beq;
 
 initial begin
     j       <= 0;
     halt    <= 0;
     lw      <= 0;
     sw      <= 0;
     alu     <= 0;
     addi    <= 0;
     beq     <= 0;
 end
 
 always @(*) begin
     j       <= instruction == 2;
     beq     <= instruction == 4;
     alu     <= instruction == 0;
     addi    <= instruction == 8;
     lw      <= instruction == 35;
     sw      <= instruction == 43;
     halt    <= instruction == 63;
 end
endmodule
//---- Top entity
module v6eb415 (
 input [31:0] vf36d91,
 output [5:0] ve46738,
 output [4:0] v58c5d0,
 output [4:0] vaa7a52,
 output [4:0] va9e58a,
 output [5:0] vffb721,
 output [15:0] vf728ca,
 output [25:0] vcea0f4
);
 wire [0:25] w0;
 wire [0:15] w1;
 wire [0:5] w2;
 wire [0:4] w3;
 wire [0:4] w4;
 wire [0:4] w5;
 wire [0:5] w6;
 wire [0:31] w7;
 assign vcea0f4 = w0;
 assign vf728ca = w1;
 assign vffb721 = w2;
 assign va9e58a = w3;
 assign vaa7a52 = w4;
 assign v58c5d0 = w5;
 assign ve46738 = w6;
 assign w7 = vf36d91;
 v6eb415_v161ee7 v161ee7 (
  .dir_2(w0),
  .dir_1(w1),
  .funtion(w2),
  .rd(w3),
  .rt(w4),
  .rs(w5),
  .inst(w6),
  .instruction(w7)
 );
endmodule



module v6eb415_v161ee7 (
 input [31:0] instruction,
 output [5:0] inst,
 output [4:0] rs,
 output [4:0] rt,
 output [4:0] rd,
 output [5:0] funtion,
 output [15:0] dir_1,
 output [25:0] dir_2
);
 assign inst = instruction[31:26];
 
 assign rs = instruction[25:21];
 
 assign rt = instruction[20:16];
 
 assign rd = instruction[15:11];
 
 assign funtion = instruction[5:0];
 
 assign rd = instruction[15:0];
 
 assign rd = instruction[25:0];
endmodule
//---- Top entity
module v528969 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v528969_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

module v528969_vf4938a (
 input a,
 input b,
 output c
);
 // OR logic gate
 
 assign c = a | b;
endmodule
//---- Top entity
module v9bd618 (
 input vee7d2e,
 input v7c941b,
 input v074026,
 output [2:0] vf4438f
);
 wire w0;
 wire w1;
 wire w2;
 wire [0:2] w3;
 assign w0 = vee7d2e;
 assign w1 = v7c941b;
 assign w2 = v074026;
 assign vf4438f = w3;
 v9bd618_v44afc9 v44afc9 (
  .in_1(w0),
  .in_2(w1),
  .in_3(w2),
  .out(w3)
 );
endmodule



module v9bd618_v44afc9 (
 input in_1,
 input in_2,
 input in_3,
 output [2:0] out
);
 reg [2:0]salida;
 
 initial begin
     salida <= 0;
 end
 always @(*) begin
     salida[0] <= in_1;
     salida[1] <= in_2;
     salida[2] <= in_3;
 end
 
 assign out = salida;
endmodule
//---- Top entity
module vb8675c (
 input v4dc0e5,
 input v440cab,
 input ve476c7,
 output v411418
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign v411418 = w0;
 assign w1 = v4dc0e5;
 assign w2 = v440cab;
 assign w3 = ve476c7;
 vb8675c_v9f9f78 v9f9f78 (
  .d(w0),
  .a(w1),
  .b(w2),
  .c(w3)
 );
endmodule



module vb8675c_v9f9f78 (
 input a,
 input b,
 input c,
 output d
);
 assign d = a | b | c;
endmodule
//---- Top entity
module vf069d0 (
 input ve70352,
 input vd1d1c6,
 input v51a33d,
 input [4:0] v92bf35,
 input [31:0] v7d4d05,
 input [4:0] v630828,
 input [4:0] v162198,
 output [31:0] v70ed7b,
 output [31:0] vff4be9
);
 wire w0;
 wire [0:31] w1;
 wire [0:31] w2;
 wire w3;
 wire w4;
 wire [0:31] w5;
 wire [0:4] w6;
 wire [0:4] w7;
 wire [0:4] w8;
 assign w0 = vd1d1c6;
 assign v70ed7b = w1;
 assign vff4be9 = w2;
 assign w3 = ve70352;
 assign w4 = v51a33d;
 assign w5 = v7d4d05;
 assign w6 = v92bf35;
 assign w7 = v630828;
 assign w8 = v162198;
 vf069d0_v31ef17 v31ef17 (
  .reset(w0),
  .Read_Data_1(w1),
  .Read_Data_2(w2),
  .clk(w3),
  .write(w4),
  .Write_Data(w5),
  .Write_Reg(w6),
  .Read_Reg_1(w7),
  .Read_Reg_2(w8)
 );
endmodule



module vf069d0_v31ef17 (
 input clk,
 input reset,
 input write,
 input [4:0] Write_Reg,
 input [31:0] Write_Data,
 input [4:0] Read_Reg_1,
 input [4:0] Read_Reg_2,
 output [31:0] Read_Data_1,
 output [31:0] Read_Data_2
);
 // Memory 
 reg [31:0] Mem [0:31];
 
 // Address Memory
 wire [4:0] Read_Reg_1;
 wire [4:0] Read_Reg_2;
 wire [4:0] Write_Reg;
 
 // Input control
 wire reset;
 wire clk;
 wire write;
 
 // Output Read Reg Data
 reg [31:0] Read_Data_1;
 reg [31:0] Read_Data_2;
 
 // Input Write Data
 wire [31:0] Write_Data;
 
 always @(posedge clk or posedge reset)
 begin
     if(reset != 0) begin
         for (i = 1; i < 32; i = i + 1) begin
             Mem[i] <= 32'b0;
         end
     end else if (write == 1 && Write_Reg != 0) begin
         Mem[Write_Reg] <= Write_Data;
     end
 end
 
 integer i;
 
 always @(*) 
 begin
     if (reset != 0) begin
         Read_Data_1 <= 0;
         Read_Data_2 <= 0;
     end else begin
         if(Read_Reg_1 != 0)
             Read_Data_1 <= Mem[Read_Reg_1];
         else
             Read_Data_1 <= 0;
             
         if(Read_Reg_2 != 0)
             Read_Data_2 <= Mem[Read_Reg_2];
         else
             Read_Data_2 <= 0;
     end
 end
 
 initial begin
     for (i = 1; i < 32; i = i + 1) begin
             Mem[i] <= 32'b0;
     end
 end
endmodule
//---- Top entity
module vad2ca2 (
 input [15:0] v8875b0,
 output [31:0] vf3e218
);
 wire [0:15] w0;
 wire [0:31] w1;
 assign w0 = v8875b0;
 assign vf3e218 = w1;
 vad2ca2_vcb072c vcb072c (
  .in(w0),
  .out(w1)
 );
endmodule



module vad2ca2_vcb072c (
 input [15:0] in,
 output [31:0] out
);
 assign out = in;
endmodule
//---- Top entity
module v5f636f (
 input [31:0] vaaa062,
 input [31:0] v477049,
 input v98063f,
 output [31:0] v40e64d
);
 wire [0:31] w0;
 wire [0:31] w1;
 wire w2;
 wire [0:31] w3;
 assign w0 = vaaa062;
 assign w1 = v477049;
 assign w2 = v98063f;
 assign v40e64d = w3;
 v5f636f_vf283f6 vf283f6 (
  .in0(w0),
  .in1(w1),
  .sel(w2),
  .out(w3)
 );
endmodule



module v5f636f_vf283f6 (
 input [31:0] in0,
 input [31:0] in1,
 input sel,
 output [31:0] out
);
 reg [31:0]_o;
 
 always @(*) begin
     case(sel)
         0: _o = in0;
         1: _o = in1;
         default: _o = in0;
     endcase
 end
 
 assign out = _o;
endmodule
//---- Top entity
module ve1ccfb (
 input [4:0] v4d5da6,
 input [4:0] v450788,
 input v3f515a,
 output [4:0] v780e4a
);
 wire [0:4] w0;
 wire [0:4] w1;
 wire w2;
 wire [0:4] w3;
 assign w0 = v4d5da6;
 assign w1 = v450788;
 assign w2 = v3f515a;
 assign v780e4a = w3;
 ve1ccfb_v918443 v918443 (
  .in0(w0),
  .in1(w1),
  .sel(w2),
  .out(w3)
 );
endmodule



module ve1ccfb_v918443 (
 input [4:0] in0,
 input [4:0] in1,
 input sel,
 output [4:0] out
);
 reg [4:0]_o;
 
 always @(*) begin
     case(sel)
         0: _o = in0;
         1: _o = in1;
         default: _o = in0;
     endcase
 end
 
 assign out = _o;
endmodule
//---- Top entity
module v7ebc90 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v7ebc90_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

module v7ebc90_vf4938a (
 input a,
 input b,
 output c
);
 // AND logic gate
 
 assign c = a & b;
endmodule
//---- Top entity
module vd2ef76 (
 input [31:0] vc1d2ba,
 input v9b5fcc,
 output [31:0] v240270
);
 wire w0;
 wire [0:31] w1;
 wire [0:31] w2;
 assign w0 = v9b5fcc;
 assign w1 = vc1d2ba;
 assign v240270 = w2;
 vd2ef76_v9ff69c v9ff69c (
  .clk(w0),
  .in(w1),
  .out(w2)
 );
endmodule



module vd2ef76_v9ff69c (
 input [31:0] in,
 input clk,
 output [31:0] out
);
 reg [31:0]pc;
 
 initial begin
     pc <= 0;
 end
 
 always @(posedge clk) begin
     pc <= in;
 end
 
 assign out = pc;
endmodule
//---- Top entity
module v27e935 #(
 parameter vac15e2 = 256
) (
 input v5d2dcc,
 input va993b5,
 input va0c046,
 input [31:0] vfe4e9a,
 output [31:0] v5d0c90
);
 localparam p0 = vac15e2;
 wire w1;
 wire w2;
 wire w3;
 wire [0:31] w4;
 wire [0:31] w5;
 assign w1 = v5d2dcc;
 assign w2 = va993b5;
 assign w3 = va0c046;
 assign v5d0c90 = w4;
 assign w5 = vfe4e9a;
 v27e935_v0a05b1 #(
  .M(p0)
 ) v0a05b1 (
  .clk(w1),
  .rst(w2),
  .cnt(w3),
  .out(w4),
  .pc(w5)
 );
endmodule



module v27e935_v0a05b1 #(
 parameter M = 0
) (
 input clk,
 input rst,
 input cnt,
 input [31:0] pc,
 output [31:0] out
);
 reg [31:0]_o;
 reg ov;
 
 initial begin
     _o <= 0;
     ov <= 0;
 end
 
 always @(posedge clk) begin
     ov = (_o == M);
     if(rst | ov) begin
         _o <= 0;
     end else begin
         _o <= pc + 4;
     end
 end
 
 assign out = _o;
 
endmodule
//---- Top entity
module vb672ab (
 input [31:0] va7e1cb,
 input [31:0] v4486d9,
 output [31:0] v49375d
);
 wire [0:31] w0;
 wire [0:31] w1;
 wire [0:31] w2;
 assign w0 = va7e1cb;
 assign w1 = v4486d9;
 assign v49375d = w2;
 vb672ab_v2322bc v2322bc (
  .in_1(w0),
  .in_2(w1),
  .out(w2)
 );
endmodule



module vb672ab_v2322bc (
 input [31:0] in_1,
 input [31:0] in_2,
 output [31:0] out
);
 assign out = in_1 + in_2;
endmodule
//---- Top entity
module v2f96ba (
 input [31:0] ve99b4a,
 output [31:0] v9cfdd2
);
 wire [0:31] w0;
 wire [0:31] w1;
 assign w0 = ve99b4a;
 assign v9cfdd2 = w1;
 v2f96ba_v5bddd1 v5bddd1 (
  .in(w0),
  .out(w1)
 );
endmodule



module v2f96ba_v5bddd1 (
 input [31:0] in,
 output [31:0] out
);
 reg [31:0]dout;
 
 initial begin
     dout <= 0;
 end
 
 always @(*) begin
     dout <= {in[29:0], in[31:30]};
 end
 
 assign out = dout;
endmodule
//---- Top entity
module v426bc2 (
 input [3:0] v52a81f,
 input [25:0] vb78917,
 output [31:0] vb27a80
);
 wire [0:3] w0;
 wire [0:25] w1;
 wire [0:31] w2;
 assign w0 = v52a81f;
 assign w1 = vb78917;
 assign vb27a80 = w2;
 v426bc2_v33c5b5 v33c5b5 (
  .in_0(w0),
  .in_1(w1),
  .out(w2)
 );
endmodule



module v426bc2_v33c5b5 (
 input [3:0] in_0,
 input [25:0] in_1,
 output [31:0] out
);
 reg [1:0]cero;
 initial begin
     cero <= 0;
 end
 assign out = {in_0[3:0], in_1[25:0], cero};
endmodule
//---- Top entity
module v9da047 (
 input [31:0] va80fcd,
 output [3:0] v8b2ec8
);
 wire [0:31] w0;
 wire [0:3] w1;
 assign w0 = va80fcd;
 assign v8b2ec8 = w1;
 v9da047_v2377e9 v2377e9 (
  .in(w0),
  .out(w1)
 );
endmodule



module v9da047_v2377e9 (
 input [31:0] in,
 output [3:0] out
);
 assign out = in[31:28];
endmodule
