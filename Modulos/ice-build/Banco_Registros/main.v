// Code generated by Icestudio 0.6.0

`default_nettype none

//---- Top entity
module main #(
 parameter v2d6186 = "v2d6186.list"
) (
 input ve70352,
 input v51a33d,
 input [5:0] va61a55,
 input [31:0] v7d4d05,
 input vd1d1c6,
 input [5:0] ve2e442,
 input [5:0] v326a87,
 output [31:0] v70ed7b,
 output [31:0] vff4be9,
 output [0:7] vinit
);
 localparam p0 = v2d6186;
 wire [0:5] w1;
 wire [0:5] w2;
 wire w3;
 wire [0:31] w4;
 wire [0:31] w5;
 wire w6;
 wire w7;
 wire [0:5] w8;
 wire [0:31] w9;
 assign w1 = ve2e442;
 assign w2 = v326a87;
 assign w3 = vd1d1c6;
 assign v70ed7b = w4;
 assign vff4be9 = w5;
 assign w6 = ve70352;
 assign w7 = v51a33d;
 assign w8 = va61a55;
 assign w9 = v7d4d05;
 main_v31ef17 #(
  .Memoria_Registro(p0)
 ) v31ef17 (
  .Read_Reg_1(w1),
  .Read_Reg_2(w2),
  .reset(w3),
  .Read_Data_1(w4),
  .Read_Data_2(w5),
  .clk(w6),
  .write(w7),
  .Write_Reg(w8),
  .Write_Data(w9)
 );
 assign vinit = 8'b00000000;
endmodule

/*-------------------------------------------------*/
/*--   */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 
/*-------------------------------------------------*/

module main_v31ef17 #(
 parameter Memoria_Registro = 0
) (
 input clk,
 input reset,
 input write,
 input [5:0] Write_Reg,
 input [31:0] Write_Data,
 input [5:0] Read_Reg_1,
 input [5:0] Read_Reg_2,
 output [31:0] Read_Data_1,
 output [31:0] Read_Data_2
);
 // Memory 
 reg [31:0] Mem [0:31];
 
 // Address Memory
 wire [5:0] Read_Reg_1;
 wire [5:0] Read_Reg_2;
 wire [5:0] Write_Reg;
 
 // Input control
 wire reset;
 wire clk;
 wire write;
 
 // Output Read Reg Data
 reg [31:0] Read_Data_1;
 reg [31:0] Read_Data_2;
 
 // Input Write Data
 wire [31:0] Write_Data;
 
 always @(posedge clk or posedge reset)
 begin
     if(reset != 0) begin
         for (i = 1; i < 32; i = i + 1) begin
             Mem[i] <= 32'b0;
         end
     end else if (write == 1 && Write_Reg != 0) begin
         Mem[Write_Reg] <= Write_Data;
     end
 end
 
 integer i;
 
 always @(*) 
 begin
     if (reset != 0) begin
         Read_Data_1 <= 0;
         Read_Data_2 <= 0;
     end else begin
         if(Read_Reg_1 != 0)
             Read_Data_1 <= Mem[Read_Reg_1];
         else
             Read_Data_1 <= 0;
             
         if(Read_Reg_2 != 0)
             Read_Data_2 <= Mem[Read_Reg_2];
         else
             Read_Data_2 <= 0;
     end
 end
 
 // Memory contents read
 // from the Memoria_Registros table
 initial begin
     if (Memoria_Registro) $readmemh(Memoria_Registro, Mem);
 end
endmodule
